module civs.Civs where

import Data.List

-------------------------------------------------
-- From Java
-------------------------------------------------

data IncorrectFileException = pure native com.github.lands.IncorrectFileException
derive Exceptional IncorrectFileException

data PickleSerialization = pure native com.github.lands.PickleSerialization where
  native loadWorld com.github.lands.PickleSerialization.loadWorld :: MutableIO File -> IO World throws IOException, IncorrectFileException

data Dimension = pure native com.github.lands.Dimension where
  pure native getHeight :: Dimension -> Int
  pure native getWidth :: Dimension -> Int

data BiomeMatrix = pure native com.github.lands.BiomeMatrix
data FloatMatrix = pure native com.github.lands.FloatMatrix
data BooleanMatrix = pure native com.github.lands.BooleanMatrix

data World = pure native com.github.lands.World where
  pure native getBiome :: World -> BiomeMatrix
  pure native getDimension :: World -> Dimension
  pure native getElevation :: World -> FloatMatrix
  pure native getHumidity :: World -> FloatMatrix
  pure native getIrrigation :: World -> FloatMatrix
  pure native getName :: World -> String
  pure native getOcean :: World -> BooleanMatrix
  pure native getPermeability :: World -> FloatMatrix
  pure native getPrecipitations :: World -> FloatMatrix
  pure native getSeaDepth :: World -> FloatMatrix
  pure native getTemperature :: World -> FloatMatrix
  pure native getWatermap :: World -> FloatMatrix

instance Show World where
  show w = "World " ++ (World.getName w)

-------------------------------------------------
-- Basic
-------------------------------------------------

hasRepetitions :: (Eq a) => [a] -> Bool
hasRepetitions xs = nub xs != xs

assert false msg _ = error ("Assertion failed: " ++ msg)
assert true  msg x = x

-------------------------------------------------
-- Model
-------------------------------------------------

type Id = Integer

class WithId el where
  getInGame :: Game -> Id -> el

data Name = Name String | Unnamed
derive Show Name

data Position = Pos { x :: Int, y :: Int } 
derive Show Position

data Group = Group { id :: Id, name :: Name }
derive Show Group

data Game = Game { world :: World, groups :: [Group] }

ids g = map Group.id (Game.groups g)

game :: World -> [Group] -> Game
game world groups = assert (not (hasRepetitions (map Group.id groups))) "Duplicate id" $ Game world groups
derive Show Game

-------------------------------------------------
-- Data
-------------------------------------------------

-- g = game [gr1, gr2, gr3, gr4]

-------------------------------------------------
-- Actions
-------------------------------------------------

generateGame :: World -> Game
generateGame world = game world []

loadWorld :: String -> IO World
loadWorld filepath = do let wf = File.new filepath :: STMutable a File  
                        w <- wf >>= PickleSerialization.loadWorld
                        let dim = World.getDimension w
                        putStrLn $ "  Loaded world from " ++ filepath
                        putStrLn $ "    name   : " ++ (World.getName w)
                        putStrLn $ "    width  : " ++ (show $ Dimension.getWidth  dim)
                        putStrLn $ "    height : " ++ (show $ Dimension.getHeight dim)
                        return w

main :: IO ()
main = do putStrLn "Civs - Frege"
          putStrLn "--------------------------------------------------"
          w <- loadWorld "worlds/seed_77.world"
          let g = generateGame w
          putStrLn ("Final state of the game: " ++ (show g))
          putStrLn "\nDone."


