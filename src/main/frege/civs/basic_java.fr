module civs.BasicJava where

data ArrayList e = native java.util.ArrayList where
  native new :: () -> STMutable s (ArrayList e)              
  native add :: Mutable s (ArrayList e) -> e -> ST s Bool

data Random = native java.util.Random where
  native new :: Long -> STMutable s Random
  native nextInt :: Mutable s Random -> Int -> ST s Int
                  | Mutable s Random -> ST s Int
  native nextLong :: Mutable s Random -> ST s Long

data FRandom = FRandom Long
derive Show FRandom

nextLong :: FRandom -> ST s (FRandom, Long)
nextLong (FRandom seed) = do r <- Random.new seed
                             value   <- Random.nextLong r
                             newSeed <- Random.nextLong r
                             let newFRandom = FRandom newSeed
                             return (newFRandom, value)

